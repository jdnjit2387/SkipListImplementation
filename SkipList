import java.util.Random;

public class SkipList implements SkipListI {
	public SkipListNode head;    
	public SkipListNode tail;    
    public int n; 		
    public int h;       
	public Random r;    
    public SkipList()     
	{ 
	   SkipListNode p1, p2;

	   p1 = new SkipListNode(Double.NEGATIVE_INFINITY);
	   p2 = new SkipListNode(Double.POSITIVE_INFINITY);

	   head = p1;
	   tail = p2;

	   p1.right = p2;
	   p2.left = p1;

	   n = 0;
	   h = 0;

	   r = new Random();
	}
	@Override
	public SkipListNode findElement(Double k) {
		// TODO Auto-generated method stub
		SkipListNode p;
	    p = head;

	    while ( true )
	     {
	         while (p.right.key != Double.POSITIVE_INFINITY && p.right.key <= k )
		     {
	           p = p.right;
		     }
		    if ( p.down != null )
	        {  
	           p = p.down;
	        }
	        else
		   break;	
	     }
	     return(p);         
	  }
	@Override
	public Boolean insertElement(Double k) {
		// TODO Auto-generated method stub
	     SkipListNode p, q;
	     int       i;
	     p = findElement(k);
	     if(p.key==k)
	    	 return false;
	     else
	     { 	 
	     q = new SkipListNode(k);
	     q.left = p;
	     q.right = p.right;
	     p.right.left = q;
	     p.right = q;

	     i = 0;                   
	     
	     while ( r.nextDouble() < 0.5 )
	     {
	        if ( i >= h )
	   	 {
	           SkipListNode p1, p2;

		       h = h + 1;

	           p1 = new SkipListNode(Double.NEGATIVE_INFINITY);
	           p2 = new SkipListNode(Double.POSITIVE_INFINITY);
	   
		   p1.right = p2;
		   p1.down  = head;

		   p2.left = p1;
		   p2.down = tail;

		   head.up = p1;
		   tail.up = p2;

		   head = p1;
		   tail = p2;
		   
		}
		while ( p.up == null )
		{
		   p = p.left;
		}
		
		p = p.up;

	   	SkipListNode e;
	   		 
	   	e = new SkipListNode(k);  
	   	e.left = p;
	   	e.right = p.right;
	   	e.down = q;
	   		 
	   	p.right.left = e;
	   	p.right = e;
	   	q.up = e;

	        q = e;		

	        i = i + 1;	
	     }
	     return true;  
	     }
	  }

	 public void printHorizontal()
	  {
	     String s;
	     int i;

	     SkipListNode p;
	     
	     p = head;

	     while ( p.down != null )
	     {
	        p = p.down;
	     }

	     i = 0;
	     while ( p != null )
	     {
	        p.pos = i++;
	        p = p.right;
	     }
	     p = head;

	     while ( p != null )
	     {
	        s = ""+getOneRow( p );
		System.out.println(s);

	        p = p.down;
	     }
	  }

	  public String getOneRow( SkipListNode p )
	  {
	     String s;
	     int a, b, i;

	     a = 0;

	     s = ""+p.key;
	     p = p.right;


	     while ( p != null )
	     {
	        SkipListNode q;

	        q = p;
	        while (q.down != null)
		   q = q.down;
	        b = q.pos;

	        s = s + " <-";


	        for (i = a+1; i < b; i++)
	           s = s + "--------";
	 
	        s = s + "> " + p.key;

	        a = b;

	        p = p.right;
	     }

	     return(s);
	  }
	@Override
	public Boolean removeElement(Double k) {

		 
		   SkipListNode p = findElement(k);
		 
		   if (p.key != k)
		     return false;     
		   else
		   {
		   if ( p != null )
		   {
		      p.left.right = p.right;
		      p.right.left = p.left;
		   }
		   
		   do
		   {
			   p=p.up;
			   p.left.right = p.right;
			   p.right.left = p.left;
		   }while(p.up!=null);
		   
		   return true;
		   }

	}
	@Override
	public SkipListNode closestKeyAfter(Double k) {
		// TODO Auto-generated method stub
		SkipListNode p =findElement(k);
		
		if(p!=null)
		{
			return p.right;
		}
		else
			return null;
	}

}

